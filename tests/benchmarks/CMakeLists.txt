add_subdirectory(AnyOption EXCLUDE_FROM_ALL)

if (ENABLE_CUDA)
  add_executable(benchmark_cuda benchmark.cpp)
  set_source_files_properties(benchmark.cpp PROPERTIES LANGUAGE CUDA)
  add_dependencies(benchmark_cuda anyoption)
  target_compile_definitions(benchmark_cuda PUBLIC TEST_BACKEND_CUDA)
  target_include_directories(benchmark_cuda PRIVATE AnyOption ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CMAKE_CURRENT_SOURCE_DIR}/../ ${SRC}/)
  if (ENABLE_MULTI_GPU)
    target_link_libraries(benchmark_cuda PRIVATE FastKron anyoption nccl)
  else()
    target_link_libraries(benchmark_cuda PRIVATE FastKron anyoption)
  endif()
  if(OpenMP_CXX_FOUND)
    target_link_libraries(benchmark_cuda PRIVATE OpenMP::OpenMP_CXX)
  endif()
endif()

if (ENABLE_X86)
  add_executable(benchmark_x86 benchmark.cpp)
  add_dependencies(benchmark_x86 anyoption)
  target_compile_definitions(benchmark_x86 PUBLIC TEST_BACKEND_X86)
  target_include_directories(benchmark_x86 PRIVATE AnyOption ${CMAKE_CURRENT_SOURCE_DIR}/../ ${SRC}/)
  target_link_libraries(benchmark_x86 PRIVATE FastKron anyoption)
  if(OpenMP_CXX_FOUND)
    target_link_libraries(benchmark_x86 PRIVATE OpenMP::OpenMP_CXX)
  endif()
endif()

if (ENABLE_HIP)
  add_executable(benchmark_hip benchmark.cpp)
  set_source_files_properties(benchmark.cpp PROPERTIES LANGUAGE HIP)
  add_dependencies(benchmark_hip anyoption)
  target_compile_definitions(benchmark_hip PUBLIC TEST_BACKEND_HIP)
  target_include_directories(benchmark_hip PRIVATE AnyOption ${HIP_INCLUDE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../ ${SRC}/)
  target_link_libraries(benchmark_hip PRIVATE FastKron anyoption)
  if(OpenMP_CXX_FOUND)
    target_link_libraries(benchmark_hip PRIVATE OpenMP::OpenMP_CXX)
  endif()
endif()